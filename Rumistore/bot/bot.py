import os, json, asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo,
    LabeledPrice, PreCheckoutQuery, ContentType, ShippingQuery, ShippingOption
)

load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), ".env"))
BOT_TOKEN = os.getenv("BOT_TOKEN")
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
if not WEBAPP_URL or not WEBAPP_URL.startswith("http"):
    raise RuntimeError("WEBAPP_URL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# –ò—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã —Ü–µ–Ω
PRODUCTS = {
    "airmax90": {"title": "Nike Air Max 90", "price": 12990, "currency": "RUB"},
    "nb550":    {"title": "New Balance 550", "price": 15990, "currency": "RUB"},
}

def open_shop_kb():
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=WEBAPP_URL))
    ]])

@dp.message(CommandStart())
async def start(m: Message):
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–∫—Ä–æ–π –º–∏–Ω–∏-–º–∞–≥–∞–∑–∏–Ω:", reply_markup=open_shop_kb())

@dp.message(F.web_app_data)
async def webapp_data(m: Message):
    data = json.loads(m.web_app_data.data or "{}")
    if data.get("action") != "checkout":
        await m.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"); return

    items = data.get("items", [])
    currency = "RUB"
    prices = []

    for it in items:
        sku, qty = it.get("sku"), int(it.get("qty", 1))
        size = it.get("size", "?")
        prod = PRODUCTS.get(sku)
        if not prod:
            continue
        currency = prod["currency"]
        prices.append(LabeledPrice(
            label=f"{prod['title']} ({size}) √ó {qty}",
            amount=prod["price"] * qty
        ))

    if not prices:
        await m.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"); return

    if not PROVIDER_TOKEN:
        total = sum(p.amount for p in prices) / 100
        await m.answer(f"üß™ DEMO: –∑–∞–∫–∞–∑ –Ω–∞ {total:.2f} {currency}. –ü–æ–¥–∫–ª—é—á–∏ PROVIDER_TOKEN –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
        return

    await bot.send_invoice(
        chat_id=m.chat.id,
        title="–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
        description="–ö—Ä–æ—Å—Å–æ–≤–∫–∏",
        payload=f"order_{m.from_user.id}",
        provider_token=PROVIDER_TOKEN,
        currency=currency,
        prices=prices,
        need_name=True,
        need_phone_number=True,
        need_shipping_address=True,
        is_flexible=True
    )

@dp.shipping_query()
async def shipping(shq: ShippingQuery):
    opts = [
        ShippingOption(id="pickup", title="–°–∞–º–æ–≤—ã–≤–æ–∑").add_price(LabeledPrice("0", 0)),
        ShippingOption(id="courier", title="–ö—É—Ä—å–µ—Ä 1‚Äì3 –¥–Ω—è").add_price(LabeledPrice("–î–æ—Å—Ç–∞–≤–∫–∞", 39900))
    ]
    await bot.answer_shipping_query(shq.id, ok=True, shipping_options=opts)

@dp.pre_checkout_query()
async def pre_checkout(pcq: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pcq.id, ok=True)

@dp.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def paid(m: Message):
    sp = m.successful_payment
    await m.answer(f"‚úÖ –û–ø–ª–∞—á–µ–Ω–æ {sp.total_amount/100:.2f} {sp.currency}. –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ.")

async def main():
    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî —É–±—Ä–∞—Ç—å –≤–µ–±—Ö—É–∫ –∏ –≤–∏—Å—è—â–∏–µ –∞–ø–¥–µ–π—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ Conflict
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
